declare namespace sv
{
    export interface ErrorReply
    {
        errorCode:number;
        errorMessage:string;
        errorDetails:string;
    }
   
{{Types}}

	type ServerMessageTypeHandler = (message:UserMessageNotification)=>void;
	
    export class Serverville
	{
        ServerURL:string;
		ServerHost:string;
		SessionId:string;
        LogMessagesToConsole:boolean;
		PingPeriod:number;
		GlobalErrorHandler:(ev:ErrorReply)=>void;

        UserMessageTypeHandlers:{[id:string]:ServerMessageTypeHandler};
		UserMessageHandler:(message:UserMessageNotification)=>void;
		
		ResidentJoinedHandler:(notification:ResidentJoinedNotification)=>void;
		ResidentLeftHandler:(notification:ResidentLeftNotification)=>void;
		ResidentEventHandler:(notification:ResidentEventNotification)=>void;
		ResidentStateUpdateHandler:(notification:ResidentStateUpdateNotification)=>void;
		
        constructor(url:string);
        init(onComplete:(user:UserAccountInfo, err:ErrorReply)=>void):void;
		initWithResidentId(resId:string, onComplete:(user:UserAccountInfo, err:ErrorReply)=>void):void;
		switchHosts(host:string, onComplete:(err:ErrorReply)=>void):void;
		getServerTime():number;
        loadUserKeyData(onDone?:()=>void):KeyData;
		loadKeyData(id:string, onDone?:()=>void):KeyData;
		isSignedIn():boolean;
        signOut():void;
		shutdown():void;
		userInfo():UserAccountInfo;
		
		apiByName(api:string, request:Object, onSuccess:(reply:Object)=>void, onError?:(reply:ErrorReply)=>void):void;
{{APIs}}

    }
    
    export class KeyData
	{
        id:string;
		server:Serverville;
		data:any;
        
		constructor(server:Serverville, id:string);
		loadAll(onDone?:()=>void):void;
		refresh(onDone?:()=>void):void;
        set(key:string, val:any):void;
		set(key:string, val:any, data_type:string):void;
		save(onDone?:()=>void):void;
	}
}