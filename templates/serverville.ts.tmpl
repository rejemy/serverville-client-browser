/// <reference path="serverville_messages.ts" />
/// <reference path="serverville_http.ts" />
/// <reference path="serverville_ws.ts" />

// Generated, unfortunately. Edit original template in browser/templates/serverville.ts.tmpl

namespace sv
{

	type ServerMessageTypeHandler = (message:UserMessageNotification)=>void;
	
	export class Serverville
	{
		ServerURL:string;
		ServerHost:string;
		ServerProtocol:string;

		SessionId:string;
        
		private UserInfo:UserAccountInfo;
	
        LogMessagesToConsole:boolean = false;
        PingPeriod:number = 60000;

        private Transport:ServervilleTransport;
        
		GlobalErrorHandler:(ev:ErrorReply)=>void;
		
		UserMessageTypeHandlers:{[id:string]:ServerMessageTypeHandler} = {};
		UserMessageHandler:(message:UserMessageNotification)=>void;
		
		ResidentJoinedHandler:(notification:ResidentJoinedNotification)=>void;
		ResidentLeftHandler:(notification:ResidentLeftNotification)=>void;
		ResidentEventHandler:(notification:ResidentEventNotification)=>void;
		ResidentStateUpdateHandler:(notification:ResidentStateUpdateNotification)=>void;
		
		private LastSend:number = 0;
		private PingTimer:number = 0;

		private LastServerTime:number = 0;
		private LastServerTimeAt:number = 0;
		
		constructor(url:string)
		{
			this.SessionId = localStorage.getItem("SessionId");

			this.initServerUrl(url);
		}

		private initServerUrl(url:string):void
		{
			this.ServerURL = url;
			var protocolLen:number = this.ServerURL.indexOf("://");
			if(protocolLen < 2)
				throw "Malformed url: "+url;
            this.ServerHost = this.ServerURL.substring(protocolLen+3);
            this.ServerProtocol = this.ServerURL.substring(0, protocolLen);

            if(this.ServerProtocol == "ws" || this.ServerProtocol == "wss")
            {
                this.Transport = new WebSocketTransport(this);
            }
            else if(this.ServerProtocol == "http" || this.ServerProtocol == "https")
            {
                this.Transport = new HttpTransport(this);
            }
            else
            {
                throw "Unknown server protocol: "+url;
            }
		}

		init(onComplete:(user:UserAccountInfo, err:ErrorReply)=>void):void
		{
			var self:Serverville = this;
			
            function onTransportInitted(err:ErrorReply):void
            {
                if(err != null)
                {
					if(self.SessionId && err.errorCode == 2 || err.errorCode == 19)
					{
						self.setUserInfo(null);

						// Try again
						self.Transport.init(onTransportInitted);
						return;
					}

                    onComplete(null, err);
                    return;
                }
                
                if(self.SessionId)
                {
                    self.validateSession(self.SessionId,
                    function(reply:UserAccountInfo):void
                    {
                        onComplete(reply, null);

						self.startPingHeartbeat();
                    },
                    function(err:ErrorReply):void
                    {
                        self.signOut();
                        onComplete(null, err);
                    });
                }
                else
                {
                    onComplete(null, null);
                }
            };
            
			this.Transport.init(onTransportInitted);
		}
	
		initWithResidentId(resId:string, onComplete:(user:UserAccountInfo, err:ErrorReply)=>void):void
		{
			if(!resId)
			{
				this.init(onComplete);
				return;
			}

			var serverUrl:string = this.ServerURL;
			if(this.ServerProtocol == "ws")
				serverUrl = "http://"+this.ServerHost;
			else if(this.ServerProtocol == "wss")
				serverUrl = "https://"+this.ServerHost;
			
			serverUrl += "/api/GetHostWithResident";
			
			var req:GetHostWithResidentRequest = 
			{
				resident_id: resId
			};

			var self:Serverville = this;

			HttpTransport.unauthedRequest(serverUrl, req,
				function(reply:GetHostWithResidentReply):void
				{
					var url:string = self.fixupServerURL(reply.host);
					self.initServerUrl(url);
					self.init(onComplete);
				},
				function(err:ErrorReply):void
				{
					onComplete(null, err);
				});
		}

		private fixupServerURL(host:string):string
		{
			var url:string = host;
			if(host.indexOf("://") < 0)
			{
				url = this.ServerProtocol + "://"+host;
			}
			return url;
		}

		switchHosts(host:string, onComplete:(err:ErrorReply)=>void):void
		{
			var url:string = this.fixupServerURL(host);

			if(this.ServerURL == url)
			{
				onComplete(null);
				return;
			}

			this.shutdown();

			this.initServerUrl(url);
			this.init(
				function(user:UserAccountInfo, err:ErrorReply):void
				{
					onComplete(err);
				}
			);
		}

		private startPingHeartbeat():void
		{
			if(this.PingPeriod == 0 || this.PingTimer != 0)
				return;

			var self:Serverville = this;

			this.PingTimer = window.setInterval(function():void
			{
				self.ping();
			}, this.PingPeriod);
		}

		private stopPingHeartbeat():void
		{
			if(this.PingTimer != 0)
			{
				window.clearInterval(this.PingTimer);
			}
			this.PingTimer = 0;
		}

		private setUserInfo(userInfo:SignInReply):void
		{
			if(userInfo == null)
			{
				this.UserInfo = null;
				this.SessionId = null;
				localStorage.removeItem("SessionId");
			}
			else
			{
				this.UserInfo = userInfo;
				this.SessionId = userInfo.session_id;
				localStorage.setItem("SessionId", this.SessionId);

				this.setServerTime(userInfo.time);
			}
		}
		
		private setUserSession(sessionId:string):void
		{
			this.SessionId = sessionId;
			localStorage.setItem("SessionId", this.SessionId);
		}	
		
		userInfo():UserAccountInfo
		{
			return this.UserInfo;
		}
		
		_onServerError(err:ErrorReply):void
		{
			if(err.errorCode < 0)
			{
				// Network error
				this.shutdown();
			}

			if(err.errorCode == 2 || err.errorCode == 19) // Session expired
			{
				this.setUserInfo(null);
				this.shutdown();
			}

			if(this.GlobalErrorHandler != null)
				this.GlobalErrorHandler(err);
		}
		
		_onServerNotification(notificationType:string, notificationJson:string):void
		{
			var notification:Object = JSON.parse(notificationJson);

			switch(notificationType)
			{
				case "error":
					// Pushed error
					this._onServerError(<ErrorReply>notification);
					return;
				case "msg":
					// User message
					this._onUserMessage(<UserMessageNotification>notification);
					return;
				case "resJoined":
					if(this.ResidentJoinedHandler)
						this.ResidentJoinedHandler(<ResidentJoinedNotification>notification);
					return;
				case "resLeft":
					if(this.ResidentLeftHandler)
						this.ResidentLeftHandler(<ResidentLeftNotification>notification);
					return;
				case "resEvent":
					if(this.ResidentEventHandler)
						this.ResidentEventHandler(<ResidentEventNotification>notification);
					return;
				case "resUpdate":
					if(this.ResidentStateUpdateHandler)
						this.ResidentStateUpdateHandler(<ResidentStateUpdateNotification>notification);
					return;
				default:
					console.log("Unknown type of server notification: "+notificationType);
					return;
			}	
		}

		_onUserMessage(message:UserMessageNotification):void
		{
			var typeHandler:ServerMessageTypeHandler = this.UserMessageTypeHandlers[message.message_type];
			if(typeHandler != null)
			{
				typeHandler(message);
			}
			else if(this.UserMessageHandler != null)
			{
				this.UserMessageHandler(message);
			}
			else
			{
				console.log("No handler for message "+message.message_type);
			}
		}
		
		_onTransportClosed():void
		{
			this.stopPingHeartbeat();

			this._onServerError(makeClientError(-1));
		}

		private ping():void
		{
			if(performance.now() - this.LastSend < 4000)
				return;

			var self:Serverville = this;

			this.getTime(function(reply:ServerTime):void
			{
				self.setServerTime(reply.time);
			},
			function(err:ErrorReply):void
			{
				if(err.errorCode <= 0)
				{
					// Network error, stop pinging until we make another real request
					self.shutdown();
				}
			});
		}

		setServerTime(time:number):void
		{
			this.LastServerTime = time;
			this.LastServerTimeAt = performance.now();
		}

		getServerTime():number
		{
			if(this.LastServerTime == 0)
				return 0;
			return (performance.now() - this.LastServerTimeAt) + this.LastServerTime;
		}

		getLastSendTime():number
		{
			return this.LastSend;
		}

		loadUserKeyData(onDone?:()=>void):KeyData
		{
			if(!this.UserInfo)
				throw "No user loaded";
				
			var data:KeyData = new KeyData(this, this.UserInfo.user_id);
			data.loadAll(onDone);
			return data;
		}
		
		loadKeyData(id:string, onDone?:()=>void):KeyData
		{
			var data:KeyData = new KeyData(this, id);
			data.loadAll(onDone);
			return data;
		}
		
		isSignedIn():boolean
		{
			return this.SessionId != null;
		}
		
        signOut():void
		{
			this.setUserInfo(null);
			
		}
        
		shutdown():void
		{
			this.stopPingHeartbeat();

			if(this.Transport)
			{
				this.Transport.close();
			}
		}

        apiByName(api:string, request:Object, onSuccess:(reply:Object)=>void, onError?:(reply:ErrorReply)=>void):void
		{
			var self:Serverville = this;
			this.Transport.callApi(api,
				request,
				function(reply:Object):void
				{
					self.startPingHeartbeat();
					if(onSuccess)
						onSuccess(reply);
				},
				onError
			);

			this.LastSend = performance.now();
		}
        
		// Start generated code -----------------------------------------------------------------------------------

{{APIs}}
        
        
	}

		
}