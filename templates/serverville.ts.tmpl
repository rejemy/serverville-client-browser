/// <reference path="serverville_messages.ts" />
/// <reference path="serverville_http.ts" />
/// <reference path="serverville_ws.ts" />

// Generated, unfortunately. Edit original template in browser/templates/serverville.ts.tmpl

namespace sv
{

	type ServerMessageTypeHandler = (from:string, via:string, msg:Object)=>void;
	
	export class Serverville
	{
		ServerURL:string;

		SessionId:string;
        
		private UserInfo:UserAccountInfo;
	
        LogMessagesToConsole:boolean = false;
        PingPeriod:number = 5000;

        private Transport:ServervilleTransport;
        
		GlobalErrorHandler:(ev:ErrorReply)=>void;
		
		ServerMessageTypeHandlers:{[id:string]:ServerMessageTypeHandler} = {};
		ServerMessageHandler:(messageType:string, from:string, via:string, msg:Object)=>void;
		
		private LastSend:number = 0;
		private PingTimer:number = 0;

		private LastServerTime:number = 0;
		private LastServerTimeAt:number = 0;
		
		constructor(url:string)
		{
			this.ServerURL = url;
			this.SessionId = localStorage.getItem("SessionId");
            
            if(this.ServerURL.substr(0, 5) == "ws://" || this.ServerURL.substr(0, 6) == "wss://")
            {
                this.Transport = new WebSocketTransport(this);
            }
            else if(this.ServerURL.substr(0, 7) == "http://" || this.ServerURL.substr(0, 8) == "https://")
            {
                this.Transport = new HttpTransport(this);
            }
            else
            {
                throw "Unknown server protocol: "+url;
            }
		}
		
		init(onComplete:(user:UserAccountInfo, err:ErrorReply)=>void):void
		{
			var self:Serverville = this;
			
            this.Transport.init(function(err:ErrorReply):void
            {
                if(err != null)
                {
                    onComplete(null, err);
                    return;
                }
                
                if(self.SessionId)
                {
                    self.validateSession(self.SessionId,
                    function(reply:UserAccountInfo):void
                    {
                        onComplete(reply, null);

						self.startPingHeartbeat();
                    },
                    function(err:ErrorReply):void
                    {
                        self.signOut();
                        onComplete(null, err);
                    });
                }
                else
                {
                    onComplete(null, null);
                }
            });
            
		}
	
		private startPingHeartbeat():void
		{
			if(this.PingTimer != 0)
				return;

			var self:Serverville = this;

			this.PingTimer = window.setInterval(function():void
			{
				self.ping();
			}, this.PingPeriod);
		}

		private stopPingHeartbeat():void
		{
			if(this.PingTimer != 0)
			{
				window.clearInterval(this.PingTimer);
			}
			this.PingTimer = 0;
		}
		private setUserInfo(userInfo:SignInReply):void
		{
			if(userInfo == null)
			{
				this.UserInfo = null;
				this.SessionId = null;
				localStorage.removeItem("SessionId");
			}
			else
			{
				this.UserInfo = userInfo;
				this.SessionId = userInfo.session_id;
				localStorage.setItem("SessionId", this.SessionId);

				this.setServerTime(userInfo.time);
			}
		}
		
		userInfo():UserAccountInfo
		{
			return this.UserInfo;
		}
		
		_onServerError(err:ErrorReply):void
		{
			if(this.GlobalErrorHandler != null)
				this.GlobalErrorHandler(err);

			if(err.errorCode == 19) // Session expired
			{
				this.shutdown();
			}
		}
		
		_onServerMessage(messageId:string, from:string, via:string, data:Object):void
		{
			if(messageId == "_error")
			{
				// Pushed error
				this._onServerError(<ErrorReply>data);
				return;
			}

			var typeHandler:ServerMessageTypeHandler = this.ServerMessageTypeHandlers[messageId];
			if(typeHandler != null)
			{
				typeHandler(from, via, data);
			}
			else if(this.ServerMessageHandler != null)
			{
				this.ServerMessageHandler(messageId, from, via, data);
			}
			else
			{
				console.log("No handler for message "+messageId);
			}
		}
		
		_onTransportClosed():void
		{
			this.stopPingHeartbeat();

			this._onServerError(makeClientError(-1));
		}

		private ping():void
		{
			if(performance.now() - this.LastSend < 4000)
				return;

			var self:Serverville = this;

			this.getTime(function(reply:ServerTime):void
			{
				self.setServerTime(reply.time);
			});
		}

		setServerTime(time:number):void
		{
			this.LastServerTime = time;
			this.LastServerTimeAt = performance.now();
		}

		getServerTime():number
		{
			if(this.LastServerTime == 0)
				return 0;
			return (performance.now() - this.LastServerTimeAt) + this.LastServerTime;
		}

		getLastSendTime():number
		{
			return this.LastSend;
		}

		loadUserKeyData(onDone?:()=>void):KeyData
		{
			if(!this.UserInfo)
				throw "No user loaded";
				
			var data:KeyData = new KeyData(this, this.UserInfo.user_id);
			data.loadAll(onDone);
			return data;
		}
		
		loadKeyData(id:string, onDone?:()=>void):KeyData
		{
			var data:KeyData = new KeyData(this, id);
			data.loadAll(onDone);
			return data;
		}
		
		isSignedIn():boolean
		{
			return this.SessionId != null;
		}
		
        signOut():void
		{
			this.setUserInfo(null);
			
		}
        
		shutdown():void
		{
			if(this.Transport)
			{
				this.Transport.close();
			}
		}

        apiByName(api:string, request:Object, onSuccess:(reply:Object)=>void, onError?:(reply:ErrorReply)=>void):void
		{
			this.Transport.callApi(api,
				request,
				onSuccess,
				onError
			);

			this.LastSend = performance.now();
		}
        
{{APIs}}
        
        
	}

		
}